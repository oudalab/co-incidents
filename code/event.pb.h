// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#ifndef PROTOBUF_INCLUDED_event_2eproto
#define PROTOBUF_INCLUDED_event_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_event_2eproto 

namespace protobuf_event_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_event_2eproto
namespace event_models {
class Embed;
class EmbedDefaultTypeInternal;
extern EmbedDefaultTypeInternal _Embed_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace event_models
namespace google {
namespace protobuf {
template<> ::event_models::Embed* Arena::CreateMaybeMessage<::event_models::Embed>(Arena*);
template<> ::event_models::Event* Arena::CreateMaybeMessage<::event_models::Event>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace event_models {

// ===================================================================

class Embed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:event_models.Embed) */ {
 public:
  Embed();
  virtual ~Embed();

  Embed(const Embed& from);

  inline Embed& operator=(const Embed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Embed(Embed&& from) noexcept
    : Embed() {
    *this = ::std::move(from);
  }

  inline Embed& operator=(Embed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Embed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embed* internal_default_instance() {
    return reinterpret_cast<const Embed*>(
               &_Embed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Embed* other);
  friend void swap(Embed& a, Embed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Embed* New() const final {
    return CreateMaybeMessage<Embed>(NULL);
  }

  Embed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Embed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Embed& from);
  void MergeFrom(const Embed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string str = 1;
  int str_size() const;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str(int index) const;
  ::std::string* mutable_str(int index);
  void set_str(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_str(int index, ::std::string&& value);
  #endif
  void set_str(int index, const char* value);
  void set_str(int index, const char* value, size_t size);
  ::std::string* add_str();
  void add_str(const ::std::string& value);
  #if LANG_CXX11
  void add_str(::std::string&& value);
  #endif
  void add_str(const char* value);
  void add_str(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& str() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str();

  // @@protoc_insertion_point(class_scope:event_models.Embed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_;
  friend struct ::protobuf_event_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:event_models.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string rootcode = 2;
  bool has_rootcode() const;
  void clear_rootcode();
  static const int kRootcodeFieldNumber = 2;
  const ::std::string& rootcode() const;
  void set_rootcode(const ::std::string& value);
  #if LANG_CXX11
  void set_rootcode(::std::string&& value);
  #endif
  void set_rootcode(const char* value);
  void set_rootcode(const char* value, size_t size);
  ::std::string* mutable_rootcode();
  ::std::string* release_rootcode();
  void set_allocated_rootcode(::std::string* rootcode);

  // optional string latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  const ::std::string& latitude() const;
  void set_latitude(const ::std::string& value);
  #if LANG_CXX11
  void set_latitude(::std::string&& value);
  #endif
  void set_latitude(const char* value);
  void set_latitude(const char* value, size_t size);
  ::std::string* mutable_latitude();
  ::std::string* release_latitude();
  void set_allocated_latitude(::std::string* latitude);

  // optional string longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  const ::std::string& longitude() const;
  void set_longitude(const ::std::string& value);
  #if LANG_CXX11
  void set_longitude(::std::string&& value);
  #endif
  void set_longitude(const char* value);
  void set_longitude(const char* value, size_t size);
  ::std::string* mutable_longitude();
  ::std::string* release_longitude();
  void set_allocated_longitude(::std::string* longitude);

  // optional string geoname = 5;
  bool has_geoname() const;
  void clear_geoname();
  static const int kGeonameFieldNumber = 5;
  const ::std::string& geoname() const;
  void set_geoname(const ::std::string& value);
  #if LANG_CXX11
  void set_geoname(::std::string&& value);
  #endif
  void set_geoname(const char* value);
  void set_geoname(const char* value, size_t size);
  ::std::string* mutable_geoname();
  ::std::string* release_geoname();
  void set_allocated_geoname(::std::string* geoname);

  // optional string date8 = 6;
  bool has_date8() const;
  void clear_date8();
  static const int kDate8FieldNumber = 6;
  const ::std::string& date8() const;
  void set_date8(const ::std::string& value);
  #if LANG_CXX11
  void set_date8(::std::string&& value);
  #endif
  void set_date8(const char* value);
  void set_date8(const char* value, size_t size);
  ::std::string* mutable_date8();
  ::std::string* release_date8();
  void set_allocated_date8(::std::string* date8);

  // optional string id = 7;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 7;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string year = 8;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 8;
  const ::std::string& year() const;
  void set_year(const ::std::string& value);
  #if LANG_CXX11
  void set_year(::std::string&& value);
  #endif
  void set_year(const char* value);
  void set_year(const char* value, size_t size);
  ::std::string* mutable_year();
  ::std::string* release_year();
  void set_allocated_year(::std::string* year);

  // optional string src_actor = 9;
  bool has_src_actor() const;
  void clear_src_actor();
  static const int kSrcActorFieldNumber = 9;
  const ::std::string& src_actor() const;
  void set_src_actor(const ::std::string& value);
  #if LANG_CXX11
  void set_src_actor(::std::string&& value);
  #endif
  void set_src_actor(const char* value);
  void set_src_actor(const char* value, size_t size);
  ::std::string* mutable_src_actor();
  ::std::string* release_src_actor();
  void set_allocated_src_actor(::std::string* src_actor);

  // optional string src_agent = 10;
  bool has_src_agent() const;
  void clear_src_agent();
  static const int kSrcAgentFieldNumber = 10;
  const ::std::string& src_agent() const;
  void set_src_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_src_agent(::std::string&& value);
  #endif
  void set_src_agent(const char* value);
  void set_src_agent(const char* value, size_t size);
  ::std::string* mutable_src_agent();
  ::std::string* release_src_agent();
  void set_allocated_src_agent(::std::string* src_agent);

  // optional string tgt_actor = 11;
  bool has_tgt_actor() const;
  void clear_tgt_actor();
  static const int kTgtActorFieldNumber = 11;
  const ::std::string& tgt_actor() const;
  void set_tgt_actor(const ::std::string& value);
  #if LANG_CXX11
  void set_tgt_actor(::std::string&& value);
  #endif
  void set_tgt_actor(const char* value);
  void set_tgt_actor(const char* value, size_t size);
  ::std::string* mutable_tgt_actor();
  ::std::string* release_tgt_actor();
  void set_allocated_tgt_actor(::std::string* tgt_actor);

  // optional string tgt_agent = 12;
  bool has_tgt_agent() const;
  void clear_tgt_agent();
  static const int kTgtAgentFieldNumber = 12;
  const ::std::string& tgt_agent() const;
  void set_tgt_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_tgt_agent(::std::string&& value);
  #endif
  void set_tgt_agent(const char* value);
  void set_tgt_agent(const char* value, size_t size);
  ::std::string* mutable_tgt_agent();
  ::std::string* release_tgt_agent();
  void set_allocated_tgt_agent(::std::string* tgt_agent);

  // optional string month = 13;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 13;
  const ::std::string& month() const;
  void set_month(const ::std::string& value);
  #if LANG_CXX11
  void set_month(::std::string&& value);
  #endif
  void set_month(const char* value);
  void set_month(const char* value, size_t size);
  ::std::string* mutable_month();
  ::std::string* release_month();
  void set_allocated_month(::std::string* month);

  // optional string day = 14;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 14;
  const ::std::string& day() const;
  void set_day(const ::std::string& value);
  #if LANG_CXX11
  void set_day(::std::string&& value);
  #endif
  void set_day(const char* value);
  void set_day(const char* value, size_t size);
  ::std::string* mutable_day();
  ::std::string* release_day();
  void set_allocated_day(::std::string* day);

  // optional string index = 15;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 15;
  const ::std::string& index() const;
  void set_index(const ::std::string& value);
  #if LANG_CXX11
  void set_index(::std::string&& value);
  #endif
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  ::std::string* mutable_index();
  ::std::string* release_index();
  void set_allocated_index(::std::string* index);

  // required .event_models.Embed embed = 16;
  bool has_embed() const;
  void clear_embed();
  static const int kEmbedFieldNumber = 16;
  private:
  const ::event_models::Embed& _internal_embed() const;
  public:
  const ::event_models::Embed& embed() const;
  ::event_models::Embed* release_embed();
  ::event_models::Embed* mutable_embed();
  void set_allocated_embed(::event_models::Embed* embed);

  // @@protoc_insertion_point(class_scope:event_models.Event)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_rootcode();
  void clear_has_rootcode();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_geoname();
  void clear_has_geoname();
  void set_has_date8();
  void clear_has_date8();
  void set_has_id();
  void clear_has_id();
  void set_has_year();
  void clear_has_year();
  void set_has_src_actor();
  void clear_has_src_actor();
  void set_has_src_agent();
  void clear_has_src_agent();
  void set_has_tgt_actor();
  void clear_has_tgt_actor();
  void set_has_tgt_agent();
  void clear_has_tgt_agent();
  void set_has_month();
  void clear_has_month();
  void set_has_day();
  void clear_has_day();
  void set_has_index();
  void clear_has_index();
  void set_has_embed();
  void clear_has_embed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr rootcode_;
  ::google::protobuf::internal::ArenaStringPtr latitude_;
  ::google::protobuf::internal::ArenaStringPtr longitude_;
  ::google::protobuf::internal::ArenaStringPtr geoname_;
  ::google::protobuf::internal::ArenaStringPtr date8_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr year_;
  ::google::protobuf::internal::ArenaStringPtr src_actor_;
  ::google::protobuf::internal::ArenaStringPtr src_agent_;
  ::google::protobuf::internal::ArenaStringPtr tgt_actor_;
  ::google::protobuf::internal::ArenaStringPtr tgt_agent_;
  ::google::protobuf::internal::ArenaStringPtr month_;
  ::google::protobuf::internal::ArenaStringPtr day_;
  ::google::protobuf::internal::ArenaStringPtr index_;
  ::event_models::Embed* embed_;
  friend struct ::protobuf_event_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Embed

// repeated string str = 1;
inline int Embed::str_size() const {
  return str_.size();
}
inline void Embed::clear_str() {
  str_.Clear();
}
inline const ::std::string& Embed::str(int index) const {
  // @@protoc_insertion_point(field_get:event_models.Embed.str)
  return str_.Get(index);
}
inline ::std::string* Embed::mutable_str(int index) {
  // @@protoc_insertion_point(field_mutable:event_models.Embed.str)
  return str_.Mutable(index);
}
inline void Embed::set_str(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:event_models.Embed.str)
  str_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Embed::set_str(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:event_models.Embed.str)
  str_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Embed::set_str(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_models.Embed.str)
}
inline void Embed::set_str(int index, const char* value, size_t size) {
  str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_models.Embed.str)
}
inline ::std::string* Embed::add_str() {
  // @@protoc_insertion_point(field_add_mutable:event_models.Embed.str)
  return str_.Add();
}
inline void Embed::add_str(const ::std::string& value) {
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_models.Embed.str)
}
#if LANG_CXX11
inline void Embed::add_str(::std::string&& value) {
  str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_models.Embed.str)
}
#endif
inline void Embed::add_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_models.Embed.str)
}
inline void Embed::add_str(const char* value, size_t size) {
  str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_models.Embed.str)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Embed::str() const {
  // @@protoc_insertion_point(field_list:event_models.Embed.str)
  return str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Embed::mutable_str() {
  // @@protoc_insertion_point(field_mutable_list:event_models.Embed.str)
  return &str_;
}

// -------------------------------------------------------------------

// Event

// optional string code = 1;
inline bool Event::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Event::code() const {
  // @@protoc_insertion_point(field_get:event_models.Event.code)
  return code_.GetNoArena();
}
inline void Event::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.code)
}
#if LANG_CXX11
inline void Event::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.code)
}
#endif
inline void Event::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.code)
}
inline void Event::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.code)
}
inline ::std::string* Event::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:event_models.Event.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_code() {
  // @@protoc_insertion_point(field_release:event_models.Event.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.code)
}

// optional string rootcode = 2;
inline bool Event::has_rootcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_rootcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_rootcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_rootcode() {
  rootcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rootcode();
}
inline const ::std::string& Event::rootcode() const {
  // @@protoc_insertion_point(field_get:event_models.Event.rootcode)
  return rootcode_.GetNoArena();
}
inline void Event::set_rootcode(const ::std::string& value) {
  set_has_rootcode();
  rootcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.rootcode)
}
#if LANG_CXX11
inline void Event::set_rootcode(::std::string&& value) {
  set_has_rootcode();
  rootcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.rootcode)
}
#endif
inline void Event::set_rootcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rootcode();
  rootcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.rootcode)
}
inline void Event::set_rootcode(const char* value, size_t size) {
  set_has_rootcode();
  rootcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.rootcode)
}
inline ::std::string* Event::mutable_rootcode() {
  set_has_rootcode();
  // @@protoc_insertion_point(field_mutable:event_models.Event.rootcode)
  return rootcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_rootcode() {
  // @@protoc_insertion_point(field_release:event_models.Event.rootcode)
  if (!has_rootcode()) {
    return NULL;
  }
  clear_has_rootcode();
  return rootcode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_rootcode(::std::string* rootcode) {
  if (rootcode != NULL) {
    set_has_rootcode();
  } else {
    clear_has_rootcode();
  }
  rootcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rootcode);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.rootcode)
}

// optional string latitude = 3;
inline bool Event::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_latitude() {
  latitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latitude();
}
inline const ::std::string& Event::latitude() const {
  // @@protoc_insertion_point(field_get:event_models.Event.latitude)
  return latitude_.GetNoArena();
}
inline void Event::set_latitude(const ::std::string& value) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.latitude)
}
#if LANG_CXX11
inline void Event::set_latitude(::std::string&& value) {
  set_has_latitude();
  latitude_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.latitude)
}
#endif
inline void Event::set_latitude(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.latitude)
}
inline void Event::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.latitude)
}
inline ::std::string* Event::mutable_latitude() {
  set_has_latitude();
  // @@protoc_insertion_point(field_mutable:event_models.Event.latitude)
  return latitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_latitude() {
  // @@protoc_insertion_point(field_release:event_models.Event.latitude)
  if (!has_latitude()) {
    return NULL;
  }
  clear_has_latitude();
  return latitude_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_latitude(::std::string* latitude) {
  if (latitude != NULL) {
    set_has_latitude();
  } else {
    clear_has_latitude();
  }
  latitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latitude);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.latitude)
}

// optional string longitude = 4;
inline bool Event::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_longitude() {
  longitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longitude();
}
inline const ::std::string& Event::longitude() const {
  // @@protoc_insertion_point(field_get:event_models.Event.longitude)
  return longitude_.GetNoArena();
}
inline void Event::set_longitude(const ::std::string& value) {
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.longitude)
}
#if LANG_CXX11
inline void Event::set_longitude(::std::string&& value) {
  set_has_longitude();
  longitude_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.longitude)
}
#endif
inline void Event::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.longitude)
}
inline void Event::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.longitude)
}
inline ::std::string* Event::mutable_longitude() {
  set_has_longitude();
  // @@protoc_insertion_point(field_mutable:event_models.Event.longitude)
  return longitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_longitude() {
  // @@protoc_insertion_point(field_release:event_models.Event.longitude)
  if (!has_longitude()) {
    return NULL;
  }
  clear_has_longitude();
  return longitude_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_longitude(::std::string* longitude) {
  if (longitude != NULL) {
    set_has_longitude();
  } else {
    clear_has_longitude();
  }
  longitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longitude);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.longitude)
}

// optional string geoname = 5;
inline bool Event::has_geoname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_geoname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_geoname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_geoname() {
  geoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geoname();
}
inline const ::std::string& Event::geoname() const {
  // @@protoc_insertion_point(field_get:event_models.Event.geoname)
  return geoname_.GetNoArena();
}
inline void Event::set_geoname(const ::std::string& value) {
  set_has_geoname();
  geoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.geoname)
}
#if LANG_CXX11
inline void Event::set_geoname(::std::string&& value) {
  set_has_geoname();
  geoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.geoname)
}
#endif
inline void Event::set_geoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geoname();
  geoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.geoname)
}
inline void Event::set_geoname(const char* value, size_t size) {
  set_has_geoname();
  geoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.geoname)
}
inline ::std::string* Event::mutable_geoname() {
  set_has_geoname();
  // @@protoc_insertion_point(field_mutable:event_models.Event.geoname)
  return geoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_geoname() {
  // @@protoc_insertion_point(field_release:event_models.Event.geoname)
  if (!has_geoname()) {
    return NULL;
  }
  clear_has_geoname();
  return geoname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_geoname(::std::string* geoname) {
  if (geoname != NULL) {
    set_has_geoname();
  } else {
    clear_has_geoname();
  }
  geoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geoname);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.geoname)
}

// optional string date8 = 6;
inline bool Event::has_date8() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_date8() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_date8() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_date8() {
  date8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date8();
}
inline const ::std::string& Event::date8() const {
  // @@protoc_insertion_point(field_get:event_models.Event.date8)
  return date8_.GetNoArena();
}
inline void Event::set_date8(const ::std::string& value) {
  set_has_date8();
  date8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.date8)
}
#if LANG_CXX11
inline void Event::set_date8(::std::string&& value) {
  set_has_date8();
  date8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.date8)
}
#endif
inline void Event::set_date8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date8();
  date8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.date8)
}
inline void Event::set_date8(const char* value, size_t size) {
  set_has_date8();
  date8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.date8)
}
inline ::std::string* Event::mutable_date8() {
  set_has_date8();
  // @@protoc_insertion_point(field_mutable:event_models.Event.date8)
  return date8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_date8() {
  // @@protoc_insertion_point(field_release:event_models.Event.date8)
  if (!has_date8()) {
    return NULL;
  }
  clear_has_date8();
  return date8_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_date8(::std::string* date8) {
  if (date8 != NULL) {
    set_has_date8();
  } else {
    clear_has_date8();
  }
  date8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date8);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.date8)
}

// optional string id = 7;
inline bool Event::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Event::id() const {
  // @@protoc_insertion_point(field_get:event_models.Event.id)
  return id_.GetNoArena();
}
inline void Event::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.id)
}
#if LANG_CXX11
inline void Event::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.id)
}
#endif
inline void Event::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.id)
}
inline void Event::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.id)
}
inline ::std::string* Event::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:event_models.Event.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_id() {
  // @@protoc_insertion_point(field_release:event_models.Event.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.id)
}

// optional string year = 8;
inline bool Event::has_year() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_year() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_year() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_year() {
  year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_year();
}
inline const ::std::string& Event::year() const {
  // @@protoc_insertion_point(field_get:event_models.Event.year)
  return year_.GetNoArena();
}
inline void Event::set_year(const ::std::string& value) {
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.year)
}
#if LANG_CXX11
inline void Event::set_year(::std::string&& value) {
  set_has_year();
  year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.year)
}
#endif
inline void Event::set_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.year)
}
inline void Event::set_year(const char* value, size_t size) {
  set_has_year();
  year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.year)
}
inline ::std::string* Event::mutable_year() {
  set_has_year();
  // @@protoc_insertion_point(field_mutable:event_models.Event.year)
  return year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_year() {
  // @@protoc_insertion_point(field_release:event_models.Event.year)
  if (!has_year()) {
    return NULL;
  }
  clear_has_year();
  return year_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_year(::std::string* year) {
  if (year != NULL) {
    set_has_year();
  } else {
    clear_has_year();
  }
  year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), year);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.year)
}

// optional string src_actor = 9;
inline bool Event::has_src_actor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event::set_has_src_actor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event::clear_has_src_actor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event::clear_src_actor() {
  src_actor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_actor();
}
inline const ::std::string& Event::src_actor() const {
  // @@protoc_insertion_point(field_get:event_models.Event.src_actor)
  return src_actor_.GetNoArena();
}
inline void Event::set_src_actor(const ::std::string& value) {
  set_has_src_actor();
  src_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.src_actor)
}
#if LANG_CXX11
inline void Event::set_src_actor(::std::string&& value) {
  set_has_src_actor();
  src_actor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.src_actor)
}
#endif
inline void Event::set_src_actor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_actor();
  src_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.src_actor)
}
inline void Event::set_src_actor(const char* value, size_t size) {
  set_has_src_actor();
  src_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.src_actor)
}
inline ::std::string* Event::mutable_src_actor() {
  set_has_src_actor();
  // @@protoc_insertion_point(field_mutable:event_models.Event.src_actor)
  return src_actor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_src_actor() {
  // @@protoc_insertion_point(field_release:event_models.Event.src_actor)
  if (!has_src_actor()) {
    return NULL;
  }
  clear_has_src_actor();
  return src_actor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_src_actor(::std::string* src_actor) {
  if (src_actor != NULL) {
    set_has_src_actor();
  } else {
    clear_has_src_actor();
  }
  src_actor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_actor);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.src_actor)
}

// optional string src_agent = 10;
inline bool Event::has_src_agent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Event::set_has_src_agent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Event::clear_has_src_agent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Event::clear_src_agent() {
  src_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_agent();
}
inline const ::std::string& Event::src_agent() const {
  // @@protoc_insertion_point(field_get:event_models.Event.src_agent)
  return src_agent_.GetNoArena();
}
inline void Event::set_src_agent(const ::std::string& value) {
  set_has_src_agent();
  src_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.src_agent)
}
#if LANG_CXX11
inline void Event::set_src_agent(::std::string&& value) {
  set_has_src_agent();
  src_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.src_agent)
}
#endif
inline void Event::set_src_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_agent();
  src_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.src_agent)
}
inline void Event::set_src_agent(const char* value, size_t size) {
  set_has_src_agent();
  src_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.src_agent)
}
inline ::std::string* Event::mutable_src_agent() {
  set_has_src_agent();
  // @@protoc_insertion_point(field_mutable:event_models.Event.src_agent)
  return src_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_src_agent() {
  // @@protoc_insertion_point(field_release:event_models.Event.src_agent)
  if (!has_src_agent()) {
    return NULL;
  }
  clear_has_src_agent();
  return src_agent_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_src_agent(::std::string* src_agent) {
  if (src_agent != NULL) {
    set_has_src_agent();
  } else {
    clear_has_src_agent();
  }
  src_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_agent);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.src_agent)
}

// optional string tgt_actor = 11;
inline bool Event::has_tgt_actor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Event::set_has_tgt_actor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Event::clear_has_tgt_actor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Event::clear_tgt_actor() {
  tgt_actor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tgt_actor();
}
inline const ::std::string& Event::tgt_actor() const {
  // @@protoc_insertion_point(field_get:event_models.Event.tgt_actor)
  return tgt_actor_.GetNoArena();
}
inline void Event::set_tgt_actor(const ::std::string& value) {
  set_has_tgt_actor();
  tgt_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.tgt_actor)
}
#if LANG_CXX11
inline void Event::set_tgt_actor(::std::string&& value) {
  set_has_tgt_actor();
  tgt_actor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.tgt_actor)
}
#endif
inline void Event::set_tgt_actor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tgt_actor();
  tgt_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.tgt_actor)
}
inline void Event::set_tgt_actor(const char* value, size_t size) {
  set_has_tgt_actor();
  tgt_actor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.tgt_actor)
}
inline ::std::string* Event::mutable_tgt_actor() {
  set_has_tgt_actor();
  // @@protoc_insertion_point(field_mutable:event_models.Event.tgt_actor)
  return tgt_actor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_tgt_actor() {
  // @@protoc_insertion_point(field_release:event_models.Event.tgt_actor)
  if (!has_tgt_actor()) {
    return NULL;
  }
  clear_has_tgt_actor();
  return tgt_actor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_tgt_actor(::std::string* tgt_actor) {
  if (tgt_actor != NULL) {
    set_has_tgt_actor();
  } else {
    clear_has_tgt_actor();
  }
  tgt_actor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tgt_actor);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.tgt_actor)
}

// optional string tgt_agent = 12;
inline bool Event::has_tgt_agent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Event::set_has_tgt_agent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Event::clear_has_tgt_agent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Event::clear_tgt_agent() {
  tgt_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tgt_agent();
}
inline const ::std::string& Event::tgt_agent() const {
  // @@protoc_insertion_point(field_get:event_models.Event.tgt_agent)
  return tgt_agent_.GetNoArena();
}
inline void Event::set_tgt_agent(const ::std::string& value) {
  set_has_tgt_agent();
  tgt_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.tgt_agent)
}
#if LANG_CXX11
inline void Event::set_tgt_agent(::std::string&& value) {
  set_has_tgt_agent();
  tgt_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.tgt_agent)
}
#endif
inline void Event::set_tgt_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tgt_agent();
  tgt_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.tgt_agent)
}
inline void Event::set_tgt_agent(const char* value, size_t size) {
  set_has_tgt_agent();
  tgt_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.tgt_agent)
}
inline ::std::string* Event::mutable_tgt_agent() {
  set_has_tgt_agent();
  // @@protoc_insertion_point(field_mutable:event_models.Event.tgt_agent)
  return tgt_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_tgt_agent() {
  // @@protoc_insertion_point(field_release:event_models.Event.tgt_agent)
  if (!has_tgt_agent()) {
    return NULL;
  }
  clear_has_tgt_agent();
  return tgt_agent_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_tgt_agent(::std::string* tgt_agent) {
  if (tgt_agent != NULL) {
    set_has_tgt_agent();
  } else {
    clear_has_tgt_agent();
  }
  tgt_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tgt_agent);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.tgt_agent)
}

// optional string month = 13;
inline bool Event::has_month() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Event::set_has_month() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Event::clear_has_month() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Event::clear_month() {
  month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_month();
}
inline const ::std::string& Event::month() const {
  // @@protoc_insertion_point(field_get:event_models.Event.month)
  return month_.GetNoArena();
}
inline void Event::set_month(const ::std::string& value) {
  set_has_month();
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.month)
}
#if LANG_CXX11
inline void Event::set_month(::std::string&& value) {
  set_has_month();
  month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.month)
}
#endif
inline void Event::set_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_month();
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.month)
}
inline void Event::set_month(const char* value, size_t size) {
  set_has_month();
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.month)
}
inline ::std::string* Event::mutable_month() {
  set_has_month();
  // @@protoc_insertion_point(field_mutable:event_models.Event.month)
  return month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_month() {
  // @@protoc_insertion_point(field_release:event_models.Event.month)
  if (!has_month()) {
    return NULL;
  }
  clear_has_month();
  return month_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_month(::std::string* month) {
  if (month != NULL) {
    set_has_month();
  } else {
    clear_has_month();
  }
  month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), month);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.month)
}

// optional string day = 14;
inline bool Event::has_day() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Event::set_has_day() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Event::clear_has_day() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Event::clear_day() {
  day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day();
}
inline const ::std::string& Event::day() const {
  // @@protoc_insertion_point(field_get:event_models.Event.day)
  return day_.GetNoArena();
}
inline void Event::set_day(const ::std::string& value) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.day)
}
#if LANG_CXX11
inline void Event::set_day(::std::string&& value) {
  set_has_day();
  day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.day)
}
#endif
inline void Event::set_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.day)
}
inline void Event::set_day(const char* value, size_t size) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.day)
}
inline ::std::string* Event::mutable_day() {
  set_has_day();
  // @@protoc_insertion_point(field_mutable:event_models.Event.day)
  return day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_day() {
  // @@protoc_insertion_point(field_release:event_models.Event.day)
  if (!has_day()) {
    return NULL;
  }
  clear_has_day();
  return day_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_day(::std::string* day) {
  if (day != NULL) {
    set_has_day();
  } else {
    clear_has_day();
  }
  day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.day)
}

// optional string index = 15;
inline bool Event::has_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Event::set_has_index() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Event::clear_has_index() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Event::clear_index() {
  index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index();
}
inline const ::std::string& Event::index() const {
  // @@protoc_insertion_point(field_get:event_models.Event.index)
  return index_.GetNoArena();
}
inline void Event::set_index(const ::std::string& value) {
  set_has_index();
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:event_models.Event.index)
}
#if LANG_CXX11
inline void Event::set_index(::std::string&& value) {
  set_has_index();
  index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:event_models.Event.index)
}
#endif
inline void Event::set_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index();
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:event_models.Event.index)
}
inline void Event::set_index(const char* value, size_t size) {
  set_has_index();
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:event_models.Event.index)
}
inline ::std::string* Event::mutable_index() {
  set_has_index();
  // @@protoc_insertion_point(field_mutable:event_models.Event.index)
  return index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_index() {
  // @@protoc_insertion_point(field_release:event_models.Event.index)
  if (!has_index()) {
    return NULL;
  }
  clear_has_index();
  return index_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_index(::std::string* index) {
  if (index != NULL) {
    set_has_index();
  } else {
    clear_has_index();
  }
  index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.index)
}

// required .event_models.Embed embed = 16;
inline bool Event::has_embed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Event::set_has_embed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Event::clear_has_embed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Event::clear_embed() {
  if (embed_ != NULL) embed_->Clear();
  clear_has_embed();
}
inline const ::event_models::Embed& Event::_internal_embed() const {
  return *embed_;
}
inline const ::event_models::Embed& Event::embed() const {
  const ::event_models::Embed* p = embed_;
  // @@protoc_insertion_point(field_get:event_models.Event.embed)
  return p != NULL ? *p : *reinterpret_cast<const ::event_models::Embed*>(
      &::event_models::_Embed_default_instance_);
}
inline ::event_models::Embed* Event::release_embed() {
  // @@protoc_insertion_point(field_release:event_models.Event.embed)
  clear_has_embed();
  ::event_models::Embed* temp = embed_;
  embed_ = NULL;
  return temp;
}
inline ::event_models::Embed* Event::mutable_embed() {
  set_has_embed();
  if (embed_ == NULL) {
    auto* p = CreateMaybeMessage<::event_models::Embed>(GetArenaNoVirtual());
    embed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:event_models.Event.embed)
  return embed_;
}
inline void Event::set_allocated_embed(::event_models::Embed* embed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete embed_;
  }
  if (embed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      embed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, embed, submessage_arena);
    }
    set_has_embed();
  } else {
    clear_has_embed();
  }
  embed_ = embed;
  // @@protoc_insertion_point(field_set_allocated:event_models.Event.embed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event_models

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_event_2eproto
